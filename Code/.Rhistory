load("C:/Users/Skikk/AppData/Roaming/MobaXterm/slash/RemoteFiles/133302_2_0/InputSimulation.RData")
View(simulation_input)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load R Packages
library(RSiena)
library(dplyr)
library(ggplot2)
library(igraph)
library(sna)
library(network)
library(RColorBrewer)
library(GGally)
library(reshape2)
library(parallel)
library(writexl)
library(stats)
library(car)
# Load Data
load("../Data/Input/Glasgow-friendship.RData")
load("../Data/Input/Glasgow-demographic.RData")
# Source Scripts
source("./SimulationRun.R")
source("./HelperFunctions.R")
source("./FormatOutput.R")
source("./AnalyzeOutput.R")
source("./Graphs.R")
# Only select actors that are active participants in both wave 2 and 3
noresponse_1 <- apply(friendship.2, 1, function(row) all(is.na(row) | row == 10))
noresponse_2 <- apply(friendship.3, 1, function(row) all(is.na(row) | row == 10))
inactive <- noresponse_1 | noresponse_2
netwmatrices <- list(friendship.2[!inactive, !inactive], friendship.3[!inactive, !inactive]) %>%
lapply(., function(x) apply(x,1, function(y) replace(y,y == 2, 1))) # Create network without weights
# Coding sex as 0/1
sex <- ifelse(sex.F[!inactive] == 1, 0, 1)
sex2 <- coCovar(sex, centered = F)
controls <- sienaAlgorithmCreate(seed = 2809, cond = FALSE)
# Creating "Real" SAOM model & second observations generated based on the second model
if (file.exists("../Data/Output/RealModel.RData")){
realmodel <- readRDS("../Data/Output/RealModel.RData")
second_observations <- readRDS("../Data/Output/SecondObservations.RData")
} else{
# Real Model
friendship <- sienaDependent(array(c(netwmatrices[[1]], netwmatrices[[2]]),
dim = c(133,133,2)))
glasgowdata <- sienaDataCreate(friendship, sex2)
effects <- getEffects(glasgowdata)
effects <- includeEffects(effects, name = "friendship",
density, recip, cycle3, gwespFF, transRecTrip, inPop, inAct)
effects <- includeEffects(effects, name = "friendship", sameX, interaction1 = "sex2")
realmodel <- siena07(controls, data = glasgowdata, effects = effects)
# Second Observations
simulation_controls <- sienaAlgorithmCreate(seed = 2809, n3 = 1000, nsub = 0)
simulations <- siena07(simulation_controls, data = glasgowdata, effects = effects,
returnDeps = T, prevAns = realmodel)
second_observations_list <- lapply(lapply(lapply(simulations$sims, "[[", "Data1"), "[[", "friendship"),
"[[", "1")
second_observations <- lapply(second_observations_list, EdgelistToMatrix)
saveRDS(realmodel, "../Data/Output/RealModel.RData")
saveRDS(second_observations, "../Data/Output/SecondObservations.RData")
}
n <- 1000
neg_error <- c(0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3)
pos_error <- c(0, 0.001)
simulation_element <- expand.grid(1:n, neg_error, pos_error)
simulation_input <- list(simulation_element, second_observations, netwmatrices, sex2, controls)
names(simulation_input) <- c("simulation_element", "second_observations",
"netwmatrices", "sex2", "controls")
save("simulation_input", file = "../Data/Input/InputSimulation.RData")
random_output <- readRDS("../Data/01_Random_Raw_Output_Full.RData")
getwd()
setwd("C:/Users/Skikk/Dropbox/Statistics & Data Science/Year 3/Thesis/Analyse/Code")
random_output <- readRDS("../Data/01_Random_Raw_Output_Full.RData")
getwd()
random_output <- readRDS("../Data/01_Random_Raw_Output_Full.RData")
View(random_output)
setwd("C:/Users/Skikk/Dropbox/Statistics & Data Science/Year 3/Thesis/Analyse/Code")
random_output <- readRDS("../Data/01_Random_Raw_Output_Full.RData")
random_results <- readRDS( "../Data/Output/01_Random_Results.RData")
random_output <- readRDS("../Data/01_Random_Raw_Output_Full.RData")
load("C:/Users/Skikk/Dropbox/Statistics & Data Science/Year 3/Thesis/Analyse/Data/Output/01_Random_Raw_Output_Full.RData")
random_output <- readRDS("../Data/01_Random_Raw_Output_Full.RData")
random_output <- readRDS("../Data/01_Random_Raw_Output_Full.RData")
load("C:/Users/Skikk/Dropbox/Statistics & Data Science/Year 3/Thesis/Analyse/Data/Output/01_Random_Raw_Output_Full.RData")
# R packages
library(RSiena)
library(dplyr)
library(ggplot2)
library(psych)
library(igraph)
library(sna)
library(network)
library(RColorBrewer)
library(GGally)
library(reshape2)
library(kableExtra)
library(jmuOutlier)
library(parallel)
# Data
load("../Analyse/Data/Input/Glasgow-friendship.RData")
load("../Analyse/Data/Input/Glasgow-demographic.RData")
set.seed(2809)
noresponse_1 <- apply(friendship.2, 1, function(row) all(is.na(row) | row == 10))
noresponse_2 <- apply(friendship.3, 1, function(row) all(is.na(row) | row == 10))
inactive <- noresponse_1 | noresponse_2
netwmatrices <- list(friendship.2[!inactive, !inactive], friendship.3[!inactive, !inactive]) %>%
lapply(., function(x) apply(x,1, function(y) replace(y,y == 2, 1)))
netwobjects <- lapply(netwmatrices, function(x) network(x, directed = T))
age2 <- age[!inactive]
sex <- ifelse(sex.F[!inactive] == 1, 0, 1)
mean(age2)
sd(age2)
indeg <- lapply(netwmatrices, function(x) rowSums(x,na.rm = T))
outdeg <- lapply(netwmatrices, function(x) colSums(x,na.rm = T))
View(outdeg)
View(outdeg)
hist(outdeg[[1]])
hist(outdeg[[2]])
load("C:/Users/Skikk/AppData/Roaming/MobaXterm/slash/RemoteFiles/133302_2_1/01_Random_Raw_Output_Full.RData")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load R Packages
library(RSiena)
library(dplyr)
library(ggplot2)
library(igraph)
library(sna)
library(network)
library(RColorBrewer)
library(GGally)
library(reshape2)
library(parallel)
library(writexl)
library(stats)
library(car)
# Load Data
load("../Data/Input/Glasgow-friendship.RData")
load("../Data/Input/Glasgow-demographic.RData")
# Source Scripts
source("./SimulationRun.R")
source("./HelperFunctions.R")
source("./FormatOutput.R")
source("./AnalyzeOutput.R")
source("./Graphs.R")
# Only select actors that are active participants in both wave 2 and 3
noresponse_1 <- apply(friendship.2, 1, function(row) all(is.na(row) | row == 10))
noresponse_2 <- apply(friendship.3, 1, function(row) all(is.na(row) | row == 10))
inactive <- noresponse_1 | noresponse_2
netwmatrices <- list(friendship.2[!inactive, !inactive], friendship.3[!inactive, !inactive]) %>%
lapply(., function(x) apply(x,1, function(y) replace(y,y == 2, 1))) # Create network without weights
# Coding sex as 0/1
sex <- ifelse(sex.F[!inactive] == 1, 0, 1)
sex2 <- coCovar(sex, centered = F)
controls <- sienaAlgorithmCreate(seed = 2809, cond = FALSE)
# Creating "Real" SAOM model & second observations generated based on the second model
if (file.exists("../Data/Output/RealModel.RData")){
realmodel <- readRDS("../Data/Output/RealModel.RData")
second_observations <- readRDS("../Data/Output/SecondObservations.RData")
} else{
# Real Model
friendship <- sienaDependent(array(c(netwmatrices[[1]], netwmatrices[[2]]),
dim = c(133,133,2)))
glasgowdata <- sienaDataCreate(friendship, sex2)
effects <- getEffects(glasgowdata)
effects <- includeEffects(effects, name = "friendship",
density, recip, cycle3, gwespFF, transRecTrip, inPop, inAct)
effects <- includeEffects(effects, name = "friendship", sameX, interaction1 = "sex2")
realmodel <- siena07(controls, data = glasgowdata, effects = effects)
# Second Observations
simulation_controls <- sienaAlgorithmCreate(seed = 2809, n3 = 1000, nsub = 0)
simulations <- siena07(simulation_controls, data = glasgowdata, effects = effects,
returnDeps = T, prevAns = realmodel)
second_observations_list <- lapply(lapply(lapply(simulations$sims, "[[", "Data1"), "[[", "friendship"),
"[[", "1")
second_observations <- lapply(second_observations_list, EdgelistToMatrix)
saveRDS(realmodel, "../Data/Output/RealModel.RData")
saveRDS(second_observations, "../Data/Output/SecondObservations.RData")
}
random_formatted <- readRDS("../Data/Output/02_Random_Formatted.RData")
load("C:/Users/Skikk/Dropbox/Statistics & Data Science/Year 3/Thesis/Analyse/Data/Output/02_Random_Formatted.RData")
random_results <- readRDS( "../Data/Output/01_Random_Results.RData")
data <- random_results$filtered_output
data <- random_results$filtered_output$theta
data <- random_results$filtered_output$theta
data <- random_results$summary_theta
View(data)
ggplot(data[data$Error_Pos == 0,], aes(x = Error_Neg, y = Rel_Bias, group = as.factor(Parameter))) +
geom_point()+
geom_line()
library(ggplot2)
ggplot(data[data$Error_Pos == 0,], aes(x = Error_Neg, y = Rel_Bias, group = as.factor(Parameter))) +
geom_point()+
geom_line()
ggplot(data[data$Error_Pos == 0,], aes(x = Error_Neg, y = Rel_Bias,
group = as.factor(Parameter), fill = as.factor(Parameter))) +
geom_point()+
geom_line()
ggplot(data[data$Error_Pos == 0,], aes(x = Error_Neg, y = Rel_Bias,
group = as.factor(Parameter), colour = as.factor(Parameter))) +
geom_point()+
geom_line()
data$Parameter <- as.factor(data$Parameter, levels = unique(data$Parameter))
data$Parameter <- as.factor(data$Parameter, levels = unique(data$Parameter))
data$Parameter <- factor(data$Parameter, levels = unique(data$Parameter))
ggplot(data[data$Error_Pos == 0,], aes(x = Error_Neg, y = Rel_Bias,
group = as.factor(Parameter), colour = as.factor(Parameter))) +
geom_point() +
geom_line() +
theem_minimal()
ggplot(data[data$Error_Pos == 0,], aes(x = Error_Neg, y = Rel_Bias,
group = as.factor(Parameter), colour = as.factor(Parameter))) +
geom_point() +
geom_line() +
theme_minimal()
ggplot(data[data$Error_Pos == 0,], aes(x = Error_Neg, y = Coverage,
group = as.factor(Parameter), colour = as.factor(Parameter))) +
geom_point() +
geom_line() +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Relative bias")
ggplot(data[data$Error_Pos == 0,], aes(x = Error_Neg, y = Coverage,
group = as.factor(Parameter), colour = as.factor(Parameter))) +
geom_point() +
geom_line() +
theme_minimal() +
geom_hline(yintercept = 0.95) +
labs(x = "Negative Error Rate", y = "Relative bias")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Variance, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point() +
geom_line() +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Variance")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Variance, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point() +
geom_line() +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Variance", legend = "Parameter")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Variance, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point() +
geom_line() +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Variance", colour = "Parameter")
library(RColorBrewer)
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Coverage, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point() +
geom_line() +
theme_minimal() +
geom_hline(yintercept = 0.95) +
scale_color_brewer(palette = "Paired")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Coverage, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point() +
geom_line(size = 1.5) +
theme_minimal() +
geom_hline(yintercept = 0.95) +
scale_color_brewer(palette = "Paired")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Coverage, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point() +
geom_line(linewidth = 1.5) +
theme_minimal() +
geom_hline(yintercept = 0.95) +
scale_color_brewer(palette = "Paired")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Coverage, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point() +
geom_line(linewidth = 1.1) +
theme_minimal() +
geom_hline(yintercept = 0.95) +
scale_color_brewer(palette = "Paired")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Coverage, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 1.5) +
geom_line(linewidth = 1.1) +
theme_minimal() +
geom_hline(yintercept = 0.95) +
scale_color_brewer(palette = "Paired")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Coverage, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1.1) +
theme_minimal() +
geom_hline(yintercept = 0.95) +
scale_color_brewer(palette = "Paired")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Coverage, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
theme_minimal() +
geom_hline(yintercept = 0.95) +
scale_color_brewer(palette = "Paired")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Coverage, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
theme_minimal() +
geom_hline(yintercept = 0.95) +
scale_color_brewer(palette = "Paired") +
labs(x = "Negative Error Rate", y = "Coverage", colour = "Parameter")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Coverage, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
theme_minimal() +
geom_hline(yintercept = 0.95) +
scale_color_brewer(palette = "Dark2") +
labs(x = "Negative Error Rate", y = "Coverage", colour = "Parameter")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Coverage, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
theme_minimal() +
geom_hline(yintercept = 0.95) +
scale_color_brewer(palette = "Paired") +
labs(x = "Negative Error Rate", y = "Coverage", colour = "Parameter")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Rel_Bias, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Relative Bias", colour = "Parameter")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Variance, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Variance", colour = "Parameter")
# With positive error
ggplot(data[data$Error_Pos == 0.001,],
aes(x = Error_Neg, y = Coverage, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
theme_minimal() +
geom_hline(yintercept = 0.95) +
scale_color_brewer(palette = "Paired") +
labs(x = "Negative Error Rate", y = "Coverage", colour = "Parameter")
ggplot(data[data$Error_Pos == 0.001,],
aes(x = Error_Neg, y = Rel_Bias, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Relative Bias", colour = "Parameter")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Rel_Bias, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Relative Bias", colour = "Parameter")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Variance, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Variance", colour = "Parameter")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Variance, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Variance", colour = "Parameter")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Variance, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Variance", colour = "Parameter") +
lim(y = c(0, 0.5))
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Variance, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Variance", colour = "Parameter") +
lims(y = c(0, 0.5))
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Variance, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Variance", colour = "Parameter") +
lims(y = c(0, 0.45))
ggplot(data[data$Error_Pos == 0.001,],
aes(x = Error_Neg, y = Rel_Bias, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Relative Bias", colour = "Parameter")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Rel_Bias, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Relative Bias", colour = "Parameter")
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Rel_Bias, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Relative Bias", colour = "Parameter") +
lims(y = c(-10, 175))
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Rel_Bias, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Relative Bias", colour = "Parameter") +
lims(y = c(-20, 175))
ggplot(data[data$Error_Pos == 0.001,],
aes(x = Error_Neg, y = Rel_Bias, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Relative Bias", colour = "Parameter") +
lims(y = c(-20, 175))
ggplot(data[data$Error_Pos == 0.001,],
aes(x = Error_Neg, y = Rel_Bias, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Paired") +
theme_minimal() +
labs(x = "Negative Error Rate", y = "Relative Bias", colour = "Parameter") +
lims(y = c(-20, 175))
ggplot(data[data$Error_Pos == 0,],
aes(x = Error_Neg, y = Coverage, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
theme_minimal() +
geom_hline(yintercept = 0.95) +
scale_color_brewer(palette = "Paired") +
labs(x = "Negative Error Rate", y = "Coverage", colour = "Parameter")
# With positive error
ggplot(data[data$Error_Pos == 0.001,],
aes(x = Error_Neg, y = Coverage, group = as.factor(Parameter),
colour = as.factor(Parameter))) +
geom_point(size = 2) +
geom_line(linewidth = 1) +
theme_minimal() +
geom_hline(yintercept = 0.95) +
scale_color_brewer(palette = "Paired") +
labs(x = "Negative Error Rate", y = "Coverage", colour = "Parameter")
