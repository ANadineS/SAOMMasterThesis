setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load R Packages
library(RSiena)
library(dplyr)
library(ggplot2)
library(igraph)
library(sna)
library(network)
library(RColorBrewer)
library(GGally)
library(reshape2)
library(parallel)
# Load Data
load("../Data/Input/Glasgow-friendship.RData")
load("../Data/Input/Glasgow-demographic.RData")
# Source Scripts
source("./SimulationRun.R")
source("./HelperFunctions.R")
source("./FormatOutput.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load R Packages
library(RSiena)
library(dplyr)
library(ggplot2)
library(igraph)
library(sna)
library(network)
library(RColorBrewer)
library(GGally)
library(reshape2)
library(parallel)
# Load Data
load("../Data/Input/Glasgow-friendship.RData")
load("../Data/Input/Glasgow-demographic.RData")
# Source Scripts
source("./SimulationRun.R")
source("./HelperFunctions.R")
source("./FormatOutput.R")
# Only select actors that are active participants in both wave 2 and 3
noresponse_1 <- apply(friendship.2, 1, function(row) all(is.na(row) | row == 10))
noresponse_2 <- apply(friendship.3, 1, function(row) all(is.na(row) | row == 10))
inactive <- noresponse_1 | noresponse_2
netwmatrices <- list(friendship.2[!inactive, !inactive], friendship.3[!inactive, !inactive]) %>%
lapply(., function(x) apply(x,1, function(y) replace(y,y == 2, 1))) # Create network without weights
# Coding sex as 0/1
sex <- ifelse(sex.F[!inactive] == 1, 0, 1)
sex2 <- coCovar(sex, centered = F)
set.seed(2809)
controls <- sienaAlgorithmCreate(seed = 2809)
# Creating "Real" SAOM model & second observations generated based on the second model
if (file.exists("../Data/Output/RealModel.RData")){
realmodel <- readRDS("../Data/Output/RealModel.RData")
second_observations <- readRDS("../Data/Output/SecondObservations.RData")
} else{
# Real Model
friendship <- sienaDependent(array(c(netwmatrices[[1]], netwmatrices[[2]]),
dim = c(133,133,2)))
glasgowdata <- sienaDataCreate(friendship, sex2)
effects <- getEffects(glasgowdata)
effects <- includeEffects(effects, name = "friendship",
density, recip, cycle3, gwespFF, transRecTrip, inPop, inAct)
effects <- includeEffects(effects, name = "friendship", sameX, interaction1 = "sex2")
realmodel <- siena07(controls, data = glasgowdata, effects = effects)
# Second Observations
simulation_controls <- sienaAlgorithmCreate(n3 = 500, nsub = 0, seed = 2809)
simulations <- siena07(simulation_controls, data = glasgowdata, effects = effects,
returnDeps = T, prevAns = realmodel)
second_observations_list <- lapply(lapply(lapply(simulations$sims, "[[", "Data1"), "[[", "friendship"),
"[[", "1")
second_observations <- lapply(second_observations_list, function(x)
as_adjacency_matrix(graph_from_edgelist(as.matrix(x[,-3]), directed = T)))
saveRDS(realmodel, "../Data/Output/RealModel.RData")
saveRDS(second_observations, "../Data/Output/SecondObservations.RData")
}
random_output <- readRDS("../Data/Output/01_Random_Raw_Output.RData")
random_formatted <- FormatOutput(random_output)
saveRDS(random_formatted, "../Data/Output/01_Random_Formatted_Output.RData")
names(random_output)
names(random_formatted)
output <- random_formatted
NetworkSummary <- function(networklist){
numerics <- lapply(networklist, function(x) matrix(as.numeric(x), nrow = nrow(x)))
netwobjects <- lapply(networklist, function(x)
network(matrix(as.numeric(x), nrow = nrow(x)), directed = T, matrix.type = "adjacency"))
netwstats <- data.frame(
"Network size" = mean(sapply(netwobjects, network.size)),
"Density" = mean(sapply(netwobjects, gden)),
"Components" = mean(sapply(netwobjects, components)),
"Transitivity" = mean(sapply(netwobjects, function(x) gtrans(x, mode = "graph"))),
"Reciprocity" = mean(sapply(netwobjects, function(x) grecip (x, measure = "edgewise")))
)
return(netwstats)
}
error_combo <- expand.grid(neg_error, pos_error)
n <- 500
neg_error <- c()
pos_error <- 0
error_combo <- expand.grid(neg_error, pos_error)
for (i in 1:ncol(error_combo)){
indices <- ((i-1)*(n)+1):n*i
obs_1 <- lapply(output$original_networks[indices], function(arr) arr[,,1])
obs_2 <- lapply(output$original_networks[indices], function(arr) arr[,,2])
an_1 <- lapply(output$analyzed_networks[indices], function(arr) arr[,,1])
an_2 <- lapply(output$analyzed_networks[indices], function(arr) arr[,,2])
print(NetworkSummary(obs_1))
}
indices <- ((i-1)*(n)+1):n*i
indices
View(output$original_networks[indices])
output$original_networks[indices][[1]]
str(output$original_networks[indices][[1]])
is(output$original_networks[indices][[1]])
output$original_networks[indices][[1]][[1]]
output$original_networks[indices][[1]][[3]]
is((output$original_networks[indices][[1]]))
lapply(output$original_networks[indices][[1]], function(arr) arr[,,1])
output$original_networks[indices][[1:2]]
lapply(output$original_networks[1:2], function(arr) arr[,,1])
lapply(output$original_networks[1:2], function(arr) arr[,,1])[[1]]
as.numeric(lapply(output$original_networks[1:2], function(arr) arr[,,1])[[1]])
is(lapply(output$original_networks[1:2], function(arr) arr[,,1])[[1]])
is.numeric(lapply(output$original_networks[indices], function(arr) arr[,,1]))
