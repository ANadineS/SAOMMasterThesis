an_2 = NetworkSummary(lapply(output$analyzed_networks[indices], function(arr) arr[,,2]))
)
stats_per_network[[i]] <- setNames(stats_error_combo, paste0("Error_", error_combo[i,1], "_", error_combo[i,2]))
}
for (i in 1:nrow(error_combo)){
print(error_combo[i,])
indices <- ((i-1)*(n)+1):n*i
print(indices)
stats_error_combo <- list(
obs_1 = NetworkSummary(output$original_networks_1[indices]),
obs_2 = NetworkSummary(output$original_networks_2[indices]),
an_1 = NetworkSummary(lapply(output$analyzed_networks[indices], function(arr) arr[,,1])),
an_2 = NetworkSummary(lapply(output$analyzed_networks[indices], function(arr) arr[,,2]))
)
stats_per_network[[i]] <- setNames(stats_error_combo, paste0("Error_", error_combo[i,1], "_", error_combo[i,2]))
}
indices
n
n
(2-1)*n+1
for (i in 1:nrow(error_combo)){
print(error_combo[i,])
indices <- ((i-1)*(n)+1):(n*i)
print(indices)
stats_error_combo <- list(
obs_1 = NetworkSummary(output$original_networks_1[indices]),
obs_2 = NetworkSummary(output$original_networks_2[indices]),
an_1 = NetworkSummary(lapply(output$analyzed_networks[indices], function(arr) arr[,,1])),
an_2 = NetworkSummary(lapply(output$analyzed_networks[indices], function(arr) arr[,,2]))
)
stats_per_network[[i]] <- setNames(stats_error_combo, paste0("Error_", error_combo[i,1], "_", error_combo[i,2]))
}
indices
View(output$original_networks_1[indices])
NetworkSummary(output$original_networks_1[indices])
output$original_networks_1[indices-500]
NetworkSummary(output$original_networks_1[indices])
View(output$original_networks_1[501:1000])
View(random_foramtted)
View(random_formatted)
View(random_formatted$error_neg)
View(random_formatted$original_networks_1)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load R Packages
library(RSiena)
library(dplyr)
library(ggplot2)
library(igraph)
library(sna)
library(network)
library(RColorBrewer)
library(GGally)
library(reshape2)
library(parallel)
# Load Data
load("../Data/Input/Glasgow-friendship.RData")
load("../Data/Input/Glasgow-demographic.RData")
# Source Scripts
source("./SimulationRun.R")
source("./HelperFunctions.R")
source("./FormatOutput.R")
# Only select actors that are active participants in both wave 2 and 3
noresponse_1 <- apply(friendship.2, 1, function(row) all(is.na(row) | row == 10))
noresponse_2 <- apply(friendship.3, 1, function(row) all(is.na(row) | row == 10))
inactive <- noresponse_1 | noresponse_2
netwmatrices <- list(friendship.2[!inactive, !inactive], friendship.3[!inactive, !inactive]) %>%
lapply(., function(x) apply(x,1, function(y) replace(y,y == 2, 1))) # Create network without weights
# Coding sex as 0/1
sex <- ifelse(sex.F[!inactive] == 1, 0, 1)
sex2 <- coCovar(sex, centered = F)
controls <- sienaAlgorithmCreate(seed = 2809)
# Creating "Real" SAOM model & second observations generated based on the second model
if (file.exists("../Data/Output/RealModel.RData")){
realmodel <- readRDS("../Data/Output/RealModel.RData")
second_observations <- readRDS("../Data/Output/SecondObservations.RData")
} else{
# Real Model
friendship <- sienaDependent(array(c(netwmatrices[[1]], netwmatrices[[2]]),
dim = c(133,133,2)))
glasgowdata <- sienaDataCreate(friendship, sex2)
effects <- getEffects(glasgowdata)
effects <- includeEffects(effects, name = "friendship",
density, recip, cycle3, gwespFF, transRecTrip, inPop, inAct)
effects <- includeEffects(effects, name = "friendship", sameX, interaction1 = "sex2")
realmodel <- siena07(controls, data = glasgowdata, effects = effects)
# Second Observations
simulation_controls <- sienaAlgorithmCreate(seed = 2809, n3 = 500, nsub = 0)
simulations <- siena07(simulation_controls, data = glasgowdata, effects = effects,
returnDeps = T, prevAns = realmodel)
second_observations_list <- lapply(lapply(lapply(simulations$sims, "[[", "Data1"), "[[", "friendship"),
"[[", "1")
second_observations <- lapply(second_observations_list, EdgelistToMatrix)
saveRDS(realmodel, "../Data/Output/RealModel.RData")
saveRDS(second_observations, "../Data/Output/SecondObservations.RData")
}
random_output <- readRDS("../Data/Output/01_Random_Raw_Output.RData")
random_output <- readRDS("../Data/Output/01_Random_Raw_Output.RData")
random_output <- readRDS("../Data/Output/01_Random_Raw_Output2.RData")
random_formatted <- FormatOutput(random_output)
saveRDS(random_formatted, "../Data/Output/01_Random_Formatted_Output.RData")
length(random_formatted)
length(random_output)
output <- random_formatted
NetworkSummary <- function(networklist){
netwobjects <- lapply(networklist, function(x)
network(as.matrix(x), directed = T, matrix.type = "adjacency"))
netwstats <- data.frame(
"Network size" = sapply(netwobjects, network.size),
"Density" = sapply(netwobjects, gden),
"Components" = sapply(netwobjects, components),
"Transitivity" = sapply(netwobjects, function(x) gtrans(x, mode = "graph")),
"Reciprocity" = sapply(netwobjects, function(x) grecip (x, measure = "edgewise"))
)
return(netwstats)
}
n <- 500
neg_error <- c(0.1, 0.2)
pos_error <- 0
simulation_element <- expand.grid(1:n, neg_error, pos_error)
error_combo <- expand.grid(neg_error, pos_error)
error_combo
stats_per_network <- vector("list", nrow(error_combo))
for (i in 1:nrow(error_combo)){
print(error_combo[i,])
indices <- ((i-1)*(n)+1):(n*i)
stats_error_combo <- list(
obs_1 = NetworkSummary(output$original_networks_1[indices]),
obs_2 = NetworkSummary(output$original_networks_2[indices]),
an_1 = NetworkSummary(lapply(output$analyzed_networks[indices], function(arr) arr[,,1])),
an_2 = NetworkSummary(lapply(output$analyzed_networks[indices], function(arr) arr[,,2]))
)
stats_per_network[[i]] <- setNames(stats_error_combo, paste0("Error_", error_combo[i,1], "_", error_combo[i,2]))
}
View(stats_per_network)
View(stats_per_network[[1]])
View(output$theta)
realmodel
names(realmodel)
realmodel$tvalues
summary(realmodel)$tvalues
realmodel$tconv.max
realmodel$tconv
View(random_output)
View(random_output[[1]]$tconv.max)
random_output[[1]]
View(random_output$results$tconv.max)
random_output[[1]]$results$tconv.max
View(output$theta)
View(stats_per_network$obs1)
for (i in 1:nrow(error_combo)){
indices <- ((i-1)*(n)+1):(n*i) # indices belonging to the error-combination
stats_error_combo <- list(
obs_1 = NetworkSummary(output$original_networks_1[indices]),
obs_2 = NetworkSummary(output$original_networks_2[indices]),
an_1 = NetworkSummary(lapply(output$analyzed_networks[indices], function(arr) arr[,,1])),
an_2 = NetworkSummary(lapply(output$analyzed_networks[indices], function(arr) arr[,,2]))
)
stats_per_network[[i]] <- setNames(stats_error_combo, c("obs1", "obs2", "analyzed1", "analyzed2"))
names(stats_per_network) <- paste0(error_combo[i,1], "_", error_combo[i,2])
}
View(stats_per_network[[1]])
View(stats_per_network[[1]]$obs1)
names(stats_per_network)
for (i in 1:nrow(error_combo)){
indices <- ((i-1)*(n)+1):(n*i) # indices belonging to the error-combination
stats_error_combo <- list(
obs_1 = NetworkSummary(output$original_networks_1[indices]),
obs_2 = NetworkSummary(output$original_networks_2[indices]),
an_1 = NetworkSummary(lapply(output$analyzed_networks[indices], function(arr) arr[,,1])),
an_2 = NetworkSummary(lapply(output$analyzed_networks[indices], function(arr) arr[,,2]))
)
stats_per_network[[i]] <- setNames(stats_error_combo, c("obs1", "obs2", "analyzed1", "analyzed2"))
names(stats_per_network)[i] <- paste0(error_combo[i,1], "_", error_combo[i,2])
}
names(stats_per_network)
summary_networkstats_mean <- lapply(c(1:nrow(error_combo)), function(x) {
stats <- data.frame(
Error_Neg = rep(error_combo[x,1], 4),
Error_Pos = rep(error_Combo[x,2], 4),
Density = lapply(stats_error_combo, function(x) mean(x$Density)),
Components = lapply(stats_error_combo, function(x) mean(x$Components)),
Transitivity = lapply(stats_error_combo, function(x) mean(x$Transitivity)),
Reciprocity = lapply(stats_error_combo, function(x) mean(x$Reciprocity))
)
})
summary_networkstats_mean <- lapply(c(1:nrow(error_combo)), function(x) {
stats <- data.frame(
Error_Neg = rep(error_combo[x,1], 4),
Error_Pos = rep(error_combo[x,2], 4),
Density = lapply(stats_error_combo, function(x) mean(x$Density)),
Components = lapply(stats_error_combo, function(x) mean(x$Components)),
Transitivity = lapply(stats_error_combo, function(x) mean(x$Transitivity)),
Reciprocity = lapply(stats_error_combo, function(x) mean(x$Reciprocity))
)
})
summary_networkstats_mean
summary_networkstats_mean <- lapply(c(1:nrow(error_combo)), function(x) {
stats <- data.frame(
Error_Neg = rep(error_combo[x,1], 4),
Error_Pos = rep(error_combo[x,2], 4),
#Density = lapply(stats_error_combo, function(x) mean(x$Density)),
#Components = lapply(stats_error_combo, function(x) mean(x$Components)),
#Transitivity = lapply(stats_error_combo, function(x) mean(x$Transitivity)),
Reciprocity = lapply(stats_error_combo, function(x) lapply(x, mean(x$Reciprocity)))
)
})
summary_networkstats_mean <- lapply(c(1:nrow(error_combo)), function(x) {
stats <- data.frame(
Error_Neg = rep(error_combo[x,1], 4),
Error_Pos = rep(error_combo[x,2], 4),
#Density = lapply(stats_error_combo, function(x) mean(x$Density)),
#Components = lapply(stats_error_combo, function(x) mean(x$Components)),
#Transitivity = lapply(stats_error_combo, function(x) mean(x$Transitivity)),
Reciprocity = lapply(stats_error_combo, function(x) lapply(x, mean(x[,5])))
)
})
summary_networkstats_mean <- lapply(c(1:nrow(error_combo)), function(x) {
stats <- data.frame(
Error_Neg = rep(error_combo[x,1], 4),
Error_Pos = rep(error_combo[x,2], 4),
Density = lapply(stats_error_combo[[x]], function(x) mean(x$Density)),
Components = lapply(stats_error_combo[[x]], function(x) mean(x$Components)),
Transitivity = lapply(stats_error_combo[[x]], function(x) mean(x$Transitivity)),
Reciprocity = lapply(stats_error_combo[[x]], function(x) mean(x$Reciprocity))
)
})
summary_networkstats_mean <- lapply(c(1:nrow(error_combo)), function(x) {
stats <- data.frame(
Error_Neg = rep(error_combo[x,1], 4),
Error_Pos = rep(error_combo[x,2], 4),
Density = lapply(stats_error_combo[[x]], function(y) mean(y$Density)),
Components = lapply(stats_error_combo[[x]], function(y) mean(y$Components)),
Transitivity = lapply(stats_error_combo[[x]], function(y) mean(y$Transitivity)),
Reciprocity = lapply(stats_error_combo[[x]], function(y) mean(y$Reciprocity))
)
})
stats_error_combo[[1]]
summary_networkstats_mean <- lapply(c(1:nrow(error_combo)), function(x) {
stats <- data.frame(
Error_Neg = rep(error_combo[x,1], 4),
Error_Pos = rep(error_combo[x,2], 4),
Density = lapply(stats_per_network[[x]], function(y) mean(y$Density)),
Components = lapply(stats_per_network[[x]], function(y) mean(y$Components)),
Transitivity = lapply(stats_per_network[[x]], function(y) mean(y$Transitivity)),
Reciprocity = lapply(stats_per_network[[x]], function(y) mean(y$Reciprocity))
)
})
summary_networkstats_mean
summary_networkstats_mean <- lapply(c(1:nrow(error_combo)), function(x) {
stats <- data.frame(
Error_Neg = rep(error_combo[x,1], 4),
Error_Pos = rep(error_combo[x,2], 4),
Density = lapply(stats_per_network[[x]], function(y) mean(y$Density)),
Components = lapply(stats_per_network[[x]], function(y) mean(y$Components)),
Transitivity = lapply(stats_per_network[[x]], function(y) mean(y$Transitivity)),
Reciprocity = lapply(stats_per_network[[x]], function(y) mean(y$Reciprocity))
)
print(stats)
})
lapply(stats_per_network[[1]], function(y) mean(y$Density))
unlist(lapply(stats_per_network[[x]], function(y) mean(y$Density)))
unlist(lapply(stats_per_network[[1]], function(y) mean(y$Density)))
summary_networkstats_mean <- lapply(c(1:nrow(error_combo)), function(x) {
stats <- data.frame(
Error_Neg = rep(error_combo[x,1], 4),
Error_Pos = rep(error_combo[x,2], 4),
Density = unlist(lapply(stats_per_network[[x]], function(y) mean(y$Density))),
Components = unlist(lapply(stats_per_network[[x]], function(y) mean(y$Components))),
Transitivity = unlist(lapply(stats_per_network[[x]], function(y) mean(y$Transitivity))),
Reciprocity = unlist(lapply(stats_per_network[[x]], function(y) mean(y$Reciprocity)))
)
})
summary_networkstats_mean
?lapply
do.call(summary_networks_mean, rbind)
?do.call
do.call(rbind, summary_networkstats_mean)
summary_networkstats_mean <- lapply(c(1:nrow(error_combo)), function(x) {
stats <- data.frame(
Error_Neg = rep(error_combo[x,1], 4),
Error_Pos = rep(error_combo[x,2], 4),
Density = unlist(lapply(stats_per_network[[x]], function(y) mean(y$Density))),
Components = unlist(lapply(stats_per_network[[x]], function(y) mean(y$Components))),
Transitivity = unlist(lapply(stats_per_network[[x]], function(y) mean(y$Transitivity))),
Reciprocity = unlist(lapply(stats_per_network[[x]], function(y) mean(y$Reciprocity)))
)
}) %>% do.call(rbind, .)
summary_networkstats_mean
View(random_formatted$results$p)
names(random_formatted)
View(random_formatted$p)
random_formatted <- FormatOutput(random_output)
output <- random_formatted
View(random_formatted$p)
source("./FormatOutput.R")
random_formatted <- FormatOutput(random_output)
source("./FormatOutput.R")
random_formatted <- FormatOutput(random_output)
FormatOutput <- function(output){
results <- list()
results$original_networks_1 <- lapply(output, "[[", "original_networks_1")
results$original_networks_2 <- lapply(output, "[[", "original_networks_2")
results$analyzed_networks <- lapply(output, "[[", "analyzed_networks")
results$actualchange <- lapply(output, "[[", "actualchange")
results$analyzedchange <- lapply(output, "[[", "original_networks")
results$error_neg <- sapply(output, "[[", "error_neg")
results$error_pos <- sapply(output, "[[", "error_pos")
results$error_in_change <- sapply(output, "[[", "error_in_change")
#results$tconv.max <- sapply(output, "[[", "tconv.max")
results$results <- lapply(output, "[[", "results")
#results$tconv <- as.data.frame(do.call(rbind, lapply(output, "[[", "tconv"))) %>%
# cbind(., sapply(output, "[[", "error_neg"), sapply(output, "[[", "error_pos"),
#      sapply(output, "[[", "error_in_change"))
#colnames(results$tconv) <-
# c("Density", "Reciprocity", "Transitivity-Reciprocity", "3-cycles", "GWESP",
#  "Indegree Popularity", "Indegree Activity", "Homophily-Sex", "Error_Neg",
# "Error_Pos", "Error_Total")
results$theta <- as.data.frame(do.call(rbind, lapply(output, "[[", "theta"))) %>%
cbind(., sapply(output, "[[", "error_neg"), sapply(output, "[[", "error_pos"),
sapply(output, "[[", "error_in_change"))
results$se <- as.data.frame(do.call(rbind, lapply(output, "[[", "se"))) %>%
cbind(., sapply(output, "[[", "error_neg"), sapply(output, "[[", "error_pos"),
sapply(output, "[[", "error_in_change"))
colnames(results$theta) <- colnames(results$se) <-
c("Rate", "Density", "Reciprocity", "Transitivity-Reciprocity", "3-cycles", "GWESP",
"Indegree Popularity", "Indegree Activity", "Homophily-Sex", "Error_Neg",
"Error_Pos", "Error_Total")
results$wald <- results$theta[,-c(10:12)]/results$se[,-c(10:12)]
results$p <- apply(as.matrix(results$wald), c(1,2), function(t) pnorm(abs(t), lower.tail = F)) %>%
cbind(., sapply(output, "[[", "error_neg"), sapply(output, "[[", "error_pos"),
sapply(output, "[[", "error_in_change"))
return(results)
}
random_formatted <- FormatOutput(random_output)
View(random_formatted$p)
FormatOutput <- function(output){
results <- list()
results$original_networks_1 <- lapply(output, "[[", "original_networks_1")
results$original_networks_2 <- lapply(output, "[[", "original_networks_2")
results$analyzed_networks <- lapply(output, "[[", "analyzed_networks")
results$actualchange <- lapply(output, "[[", "actualchange")
results$analyzedchange <- lapply(output, "[[", "original_networks")
results$error_neg <- sapply(output, "[[", "error_neg")
results$error_pos <- sapply(output, "[[", "error_pos")
results$error_in_change <- sapply(output, "[[", "error_in_change")
#results$tconv.max <- sapply(output, "[[", "tconv.max")
results$results <- lapply(output, "[[", "results")
#results$tconv <- as.data.frame(do.call(rbind, lapply(output, "[[", "tconv"))) %>%
# cbind(., sapply(output, "[[", "error_neg"), sapply(output, "[[", "error_pos"),
#      sapply(output, "[[", "error_in_change"))
#colnames(results$tconv) <-
# c("Density", "Reciprocity", "Transitivity-Reciprocity", "3-cycles", "GWESP",
#  "Indegree Popularity", "Indegree Activity", "Homophily-Sex", "Error_Neg",
# "Error_Pos", "Error_Total")
results$theta <- as.data.frame(do.call(rbind, lapply(output, "[[", "theta"))) %>%
cbind(., sapply(output, "[[", "error_neg"), sapply(output, "[[", "error_pos"),
sapply(output, "[[", "error_in_change"))
results$se <- as.data.frame(do.call(rbind, lapply(output, "[[", "se"))) %>%
cbind(., sapply(output, "[[", "error_neg"), sapply(output, "[[", "error_pos"),
sapply(output, "[[", "error_in_change"))
colnames(results$theta) <- colnames(results$se) <-
c("Rate", "Density", "Reciprocity", "Transitivity-Reciprocity", "3-cycles", "GWESP",
"Indegree Popularity", "Indegree Activity", "Homophily-Sex", "Error_Neg",
"Error_Pos", "Error_Total")
results$wald <- results$theta[,-c(10:12)]/results$se[,-c(10:12)]
results$p <- apply(as.matrix(results$wald), c(1,2), function(t) pnorm(abs(t), lower.tail = F)) %>%
cbind(., sapply(output, "[[", "error_neg"), sapply(output, "[[", "error_pos"),
sapply(output, "[[", "error_in_change"))
colnames(results$p)[10:12] <- c("Error_Neg", "Error_Pos", "Error_Total")
return(results)
}
random_formatted <- FormatOutput(random_output)
View(random_formatted$p)
?sapply
realmodel$theta
SummarizeParameters <- function(theta, p, error_combo, realmodel){
theta_to_use <- theta[theta$Error_Neg == error_combo[1] & theta$Error_Pos == error_combo[2], 1:9]
p_to_use <- p[p$Error_Neg == error_combo[1] & p$Error_Pos == error_combo[2], 1:9]
realtheta <- c(realmodel$rate, realmodel$theta)
stat <- data.frame(
Error_Neg = rep(error_combo[1], 9),
Error_Pos = rep(error_combo[2], 9),
Theta = sapply(theta_to_use, mean),
Bias = colMeans(theta_to_use) - realtheta,
Variance = sapply(theta_to_use, var),
MSE = colMeans((theta_to_use - realtheta)^2),
p = colMeans(p_to_use),
Coverage = sapply(1:9, function(i) {
mean((realtheta[i] >= quantile(theta_to_use[,i], c(0.025, 0.975))[1]) &
(realtheta[i] <= quantile(theta_to_use[,i], c(0.025, 0.975))[2]))
}),
)
return(stat)
}
summary_theta_mean <- lapply(error_combo, function(x) output$theta, output$p, x, realmodel)
summary_theta_mean <- lapply(error_combo, function(x) SummarizeParameters(output$theta, output$p, x, realmodel))
View(output$p)
output <- random_formatted
View(output$p)
summary_theta_mean <- lapply(error_combo, function(x) SummarizeParameters(output$theta, output$p, x, realmodel))
SummarizeParameters <- function(theta, p, error_combo, realmodel){
print(p)
theta_to_use <- theta[theta$Error_Neg == error_combo[1] & theta$Error_Pos == error_combo[2], 1:9]
p_to_use <- p[p$Error_Neg == error_combo[1] & p$Error_Pos == error_combo[2], 1:9]
realtheta <- c(realmodel$rate, realmodel$theta)
stat <- data.frame(
Error_Neg = rep(error_combo[1], 9),
Error_Pos = rep(error_combo[2], 9),
Theta = sapply(theta_to_use, mean),
Bias = colMeans(theta_to_use) - realtheta,
Variance = sapply(theta_to_use, var),
MSE = colMeans((theta_to_use - realtheta)^2),
p = colMeans(p_to_use),
Coverage = sapply(1:9, function(i) {
mean((realtheta[i] >= quantile(theta_to_use[,i], c(0.025, 0.975))[1]) &
(realtheta[i] <= quantile(theta_to_use[,i], c(0.025, 0.975))[2]))
}),
)
return(stat)
}
summary_theta_mean <- lapply(error_combo, function(x) SummarizeParameters(output$theta, output$p, x, realmodel))
output$p$Error_Neg
SummarizeParameters <- function(theta, p, error_combo, realmodel){
print(colnames(p))
theta_to_use <- theta[theta$Error_Neg == error_combo[1] & theta$Error_Pos == error_combo[2], 1:9]
p_to_use <- p[p$Error_Neg == error_combo[1] & p$Error_Pos == error_combo[2], 1:9]
realtheta <- c(realmodel$rate, realmodel$theta)
stat <- data.frame(
Error_Neg = rep(error_combo[1], 9),
Error_Pos = rep(error_combo[2], 9),
Theta = sapply(theta_to_use, mean),
Bias = colMeans(theta_to_use) - realtheta,
Variance = sapply(theta_to_use, var),
MSE = colMeans((theta_to_use - realtheta)^2),
p = colMeans(p_to_use),
Coverage = sapply(1:9, function(i) {
mean((realtheta[i] >= quantile(theta_to_use[,i], c(0.025, 0.975))[1]) &
(realtheta[i] <= quantile(theta_to_use[,i], c(0.025, 0.975))[2]))
}),
)
return(stat)
}
summary_theta_mean <- lapply(error_combo, function(x) SummarizeParameters(output$theta, output$p, x, realmodel))
SummarizeParameters <- function(theta, p, error_combo, realmodel){
print(is(p))
theta_to_use <- theta[theta$Error_Neg == error_combo[1] & theta$Error_Pos == error_combo[2], 1:9]
p_to_use <- p[p$Error_Neg == error_combo[1] & p$Error_Pos == error_combo[2], 1:9]
realtheta <- c(realmodel$rate, realmodel$theta)
stat <- data.frame(
Error_Neg = rep(error_combo[1], 9),
Error_Pos = rep(error_combo[2], 9),
Theta = sapply(theta_to_use, mean),
Bias = colMeans(theta_to_use) - realtheta,
Variance = sapply(theta_to_use, var),
MSE = colMeans((theta_to_use - realtheta)^2),
p = colMeans(p_to_use),
Coverage = sapply(1:9, function(i) {
mean((realtheta[i] >= quantile(theta_to_use[,i], c(0.025, 0.975))[1]) &
(realtheta[i] <= quantile(theta_to_use[,i], c(0.025, 0.975))[2]))
}),
)
return(stat)
}
summary_theta_mean <- lapply(error_combo, function(x) SummarizeParameters(output$theta, output$p, x, realmodel))
random_formatted <- FormatOutput(random_output)
output <- random_formatted
summary_theta_mean <- lapply(error_combo, function(x) SummarizeParameters(output$theta, output$p, x, realmodel))
is(output$p)
output <- random_formatted
summary_theta_mean <- lapply(error_combo, function(x) SummarizeParameters(output$theta, output$p, x, realmodel))
is(formatted_random$p)
is(random_formatted$p)
FormatOutput <- function(output){
results <- list()
results$original_networks_1 <- lapply(output, "[[", "original_networks_1")
results$original_networks_2 <- lapply(output, "[[", "original_networks_2")
results$analyzed_networks <- lapply(output, "[[", "analyzed_networks")
results$actualchange <- lapply(output, "[[", "actualchange")
results$analyzedchange <- lapply(output, "[[", "original_networks")
results$error_neg <- sapply(output, "[[", "error_neg")
results$error_pos <- sapply(output, "[[", "error_pos")
results$error_in_change <- sapply(output, "[[", "error_in_change")
#results$tconv.max <- sapply(output, "[[", "tconv.max")
results$results <- lapply(output, "[[", "results")
#results$tconv <- as.data.frame(do.call(rbind, lapply(output, "[[", "tconv"))) %>%
# cbind(., sapply(output, "[[", "error_neg"), sapply(output, "[[", "error_pos"),
#      sapply(output, "[[", "error_in_change"))
#colnames(results$tconv) <-
# c("Density", "Reciprocity", "Transitivity-Reciprocity", "3-cycles", "GWESP",
#  "Indegree Popularity", "Indegree Activity", "Homophily-Sex", "Error_Neg",
# "Error_Pos", "Error_Total")
results$theta <- as.data.frame(do.call(rbind, lapply(output, "[[", "theta"))) %>%
cbind(., sapply(output, "[[", "error_neg"), sapply(output, "[[", "error_pos"),
sapply(output, "[[", "error_in_change"))
results$se <- as.data.frame(do.call(rbind, lapply(output, "[[", "se"))) %>%
cbind(., sapply(output, "[[", "error_neg"), sapply(output, "[[", "error_pos"),
sapply(output, "[[", "error_in_change"))
colnames(results$theta) <- colnames(results$se) <-
c("Rate", "Density", "Reciprocity", "Transitivity-Reciprocity", "3-cycles", "GWESP",
"Indegree Popularity", "Indegree Activity", "Homophily-Sex", "Error_Neg",
"Error_Pos", "Error_Total")
results$wald <- results$theta[,-c(10:12)]/results$se[,-c(10:12)]
results$p <- apply(as.matrix(results$wald), c(1,2), function(t) pnorm(abs(t), lower.tail = F)) %>%
cbind(., sapply(output, "[[", "error_neg"), sapply(output, "[[", "error_pos"),
sapply(output, "[[", "error_in_change")) %>%
as.data.frame()
colnames(results$p)[10:12] <- c("Error_Neg", "Error_Pos", "Error_Total")
return(results)
}
random_formatted <- FormatOutput(random_output)
output <- random_formatted
summary_theta_mean <- lapply(error_combo, function(x) SummarizeParameters(output$theta, output$p, x, realmodel))
