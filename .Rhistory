# Data
load("./Data/Glasgow/Glasgow-friendship.RData")
table(c(0,0,1,1,friendship.1))
table(c(0,0,1,1,friendship.1), c(0,1,0,1,net2))-1
table(c(0,0,1,1,friendship.1), c(0,1,0,1,friendship.2))-1
# R packages
library(RSiena)
library(dplyr)
library(ggplot2)
library(psych)
library(igraph)
library(sna)
library(network)
library(RColorBrewer)
library(GGally)
library(reshape2)
library(kableExtra)
library(jmuOutlier)
library(parallel)
# Data
load("./Data/Glasgow/Glasgow-friendship.RData")
load("./Data/Glasgow/Glasgow-demographic.RData")
set.seed(2809)
noresponse_1 <- apply(friendship.2, 1, function(row) all(is.na(row) | row == 10))
noresponse_2 <- apply(friendship.3, 1, function(row) all(is.na(row) | row == 10))
inactive <- noresponse_1 | noresponse_2
netwmatrices <- list(friendship.2[!inactive, !inactive], friendship.3[!inactive, !inactive]) %>%
lapply(., function(x) apply(x,1, function(y) replace(y,y == 2, 1)))
netwobjects <- lapply(netwmatrices, function(x) network(x, directed = T))
age <- age[!inactive]
sex <- ifelse(sex.F[!inactive] == 1, 0, 1)
indeg <- lapply(netwmatrices, function(x) rowSums(x,na.rm = T))
outdeg <- lapply(netwmatrices, function(x) colSums(x,na.rm = T))
# Timepoint 1
t1 <- netwobjects[[1]]
set.vertex.attribute(t1, "Sex", as.character(sex))
set.vertex.attribute(t1, "Indegree", degree(t1, cmode = "indegree"))
ggnet2(t1, node.size = "Indegree", node.color = "Sex",
arrow.size = 3, arrow.gap = 0.015, palette = c("1" = "pink", "0" = "lightblue"),
max.size = 2, legend.position = "right")+
guides(size=F)+
ggtitle("Friendship network by sex and indegree centrality - Timepoint 1")+
theme(plot.title = element_text(face = "bold"))
# Timepoint 2
t2 <- netwobjects[[2]]
set.vertex.attribute(t2, "Sex", as.character(sex))
set.vertex.attribute(t2, "Indegree", degree(t2, cmode = "indegree"))
ggnet2(t2, node.size = "Indegree", node.color = "Sex",
arrow.size = 3, arrow.gap = 0.015, palette = c("1" = "pink", "0" = "lightblue"),
max.size = 2, legend.position = "right")+
guides(size=F)+
ggtitle("Friendship network by sex and indegree centrality - Timepoint 2")+
theme(plot.title = element_text(face = "bold"))
netwstats <- data.frame(
"Network size" = sapply(netwobjects, network.size),
"Density" = sapply(netwobjects, gden),
"Components" = sapply(netwobjects, components),
"Transitivity" = sapply(netwobjects, function(x) gtrans(x, mode = "graph")),
"Reciprocity" = sapply(netwobjects, function(x) grecip (x, measure = "edgewise"))
)
hamming <- function(net1,net2) {
tbl <- table(c(0,0,1,1,net1),c(0,1,0,1,net2))-1
return(tbl[1,2]+tbl[2,1])
}
jaccard <- function(net1,net2) {
tbl <- table(c(0,0,1,1,net1),c(0,1,0,1,net2))-1
return(tbl[2,2]/(tbl[1,2]+tbl[2,1]+tbl[2,2]))
}
hamming(netwmatrices[[1]], netwmatrices[[2]])
jaccard(netwmatrices[[1]], netwmatrices[[2]])
# quite some change, but acceptable stability
friendship <- sienaDependent(array(c(netwmatrices[[1]], netwmatrices[[2]]), dim = c(133,133,2)))
sex2 <- coCovar(sex, centered = F)
glasgowdata <- sienaDataCreate(friendship, sex2)
effects <- getEffects(glasgowdata)
effects <- includeEffects(effects, name = "friendship", density, recip, cycle3, gwespFF, transRecTrip, inPop, inAct)
effects <- includeEffects(effects, name = "friendship", sameX, interaction1 = "sex2")
controls <- sienaAlgorithmCreate(seed = 2809)
results <- siena07(controls, data = glasgowdata, effects = effects)
wald <- results$theta/results$se
pvals <- pnorm(abs(wald), lower.tail = F)
#gender sender and receiver effect not significant
simcontrols <- sienaAlgorithmCreate(n3 = 500, nsub = 0, seed = 2809)
thesims <- siena07(simcontrols, data = glasgowdata, effects = effects,
returnDeps = T, prevAns = results)
(gofIndegrees <- sienaGOF(thesims, varName = "friendship",
IndegreeDistribution,
cumulative = FALSE, levls = 0:11))
plot(gofIndegrees)
(gofOutdegrees <- sienaGOF(thesims, varName = "friendship",
OutdegreeDistribution, cumulative = FALSE, levls = 0:6))
plot(gofOutdegrees)
(gofTriads <- sienaGOF(thesims, varName = "friendship", TriadCensus, verbose = TRUE))
plot(gofTriads,center = TRUE, scale = TRUE)
outputobject <- vector(mode = "list", length = 8) # -> theta & se in dataframes, wald + p can be calculated outside
names(outputobject)
length(outputobject)
IntroduceError_Random <- function(matrix, error){
matrix <- apply(matrix, c(1,2),
function(x) ifelse(x == 1, rbinom(1 ,1 , 1 - error), 0))
return(matrix)
}
ChangeCoding <- function(matrix1, matrix2){
changematrix <- matrix(NA, nrow(matrix1), nrow(matrix1))
for(i in 1:nrow(matrix1)){
for (j in 1:ncol(matrix1)){
if (matrix1[i,j] == 0){
if (matrix2[i,j] == 0){
changematrix[i,j] <- 0
} else {
changematrix[i,j] <- 1
}
} else {
if (matrix2[i,j] == 1){
changematrix[i,j] <- 2
} else {
changematrix[i,j] <- 3
}
}
}
}
return(changematrix)
}
SimulationRun <- function(IntroduceError_X, obs1, obs2, sex = sex2, controls, error, index, output){
netw_1 <- IntroduceError_X(obs1, error)
netw_2 <- IntroduceError_X(obs2, error)
actualchange <- ChangeCoding(obs1, obs2)
analyzedchange <- ChangeCoding(netw_1, netw_2)
error_in_change <- sum(actualchange != analyzedchange)/(nrow(actualchange)^2-length(diag(actualchange)))
friendship <- sienaDependent(array(c(netw_1, netw_2), dim = c(133,133,2)))
glasgowdata <- sienaDataCreate(friendship, sex2)
effects <- getEffects(glasgowdata)
effects <- includeEffects(effects, name = "friendship", density, recip, cycle3, gwespFF, transRecTrip, inPop, inAct)
effects <- includeEffects(effects, name = "friendship", sameX, interaction1 = "sex2")
results <- siena07(controls, data = glasgowdata, effects = effects)
output$analyzed_networks[index] <- array(c(netw_1, netw_2), dim = c(133,133,2))
output$actualchange[index] <- actualchange
output$analyzedchange[index] <- analyzedchange
output$error[index] <- error
output$error_in_change[index] <- error_in_change
output$results[index] <- results
output$theta[index] <- results$theta
output$se[index] <- results$se
return(output)
}
output <- vector(mode = "list", length = 8)
names(output) <- c("analyzed_networks", "actualchange", "analyzedchange", "error", "error_in_change", "results", "theta", "se")
secondobservations <- list()
graphs <- list()
for(i in 1:10){
observation <- thesims$sims[[i]]$Data1$friendship$`1`
graph <- graph_from_edgelist(as.matrix(observation[,-3]), directed = T)
adj_matrix <- as_adjacency_matrix(graph)
graphs[[i]] <- graph
secondobservations[[i]] <- adj_matrix
}
simulation_element <- expand.grid(1:2, 0.1)
firsttry <- apply(simulation_element, 1, function(x) SimulationRun(IntroduceError_Random, netwmatrices[[1]], x[1], sex2, controls, x[2], x[1], output))
simulation_element
firsttry <- apply(simulation_element, 1, function(x) SimulationRun(IntroduceError_Random, netwmatrices[[1]], secondobservations[[x[1]]], sex2, controls, x[2], x[1], output))
View(output)
View(firsttry)
fisttry[[1]]
firsttry[[1]]
firsttry[[2]]
SimulationRun <- function(IntroduceError_X, obs1, obs2, sex = sex2, controls, error, index, output){
netw_1 <- IntroduceError_X(obs1, error)
netw_2 <- IntroduceError_X(obs2, error)
actualchange <- ChangeCoding(obs1, obs2)
analyzedchange <- ChangeCoding(netw_1, netw_2)
error_in_change <- sum(actualchange != analyzedchange)/(nrow(actualchange)^2-length(diag(actualchange)))
friendship <- sienaDependent(array(c(netw_1, netw_2), dim = c(133,133,2)))
glasgowdata <- sienaDataCreate(friendship, sex2)
effects <- getEffects(glasgowdata)
effects <- includeEffects(effects, name = "friendship", density, recip, cycle3, gwespFF, transRecTrip, inPop, inAct)
effects <- includeEffects(effects, name = "friendship", sameX, interaction1 = "sex2")
results <- siena07(controls, data = glasgowdata, effects = effects)
output$analyzed_networks[[index]] <- array(c(netw_1, netw_2), dim = c(133,133,2))
output$actualchange[[index]] <- actualchange
output$analyzedchange[[index]] <- analyzedchange
output$error[[index]] <- error
output$error_in_change[[index]] <- error_in_change
output$results[[index]] <- results
output$theta[[index]] <- results$theta
output$se[[index]] <- results$se
return(output)
}
simulation_element <- expand.grid(1, 0.1)
output <- apply(simulation_element, 1, function(x) SimulationRun(IntroduceError_Random, netwmatrices[[1]], secondobservations[[x[1]]], sex2, controls, x[2], x[1], output))
output
secondobservations <- list()
graphs <- list()
for(i in 1:10){
observation <- thesims$sims[[i]]$Data1$friendship$`1`
graph <- graph_from_edgelist(as.matrix(observation[,-3]), directed = T)
adj_matrix <- as_adjacency_matrix(graph)
graphs[[i]] <- graph
secondobservations[[i]] <- adj_matrix
}
simulation_element <- expand.grid(1:2, 0.1)
output <- apply(simulation_element, 1, function(x) SimulationRun(IntroduceError_Random, netwmatrices[[1]], secondobservations[[x[1]]], sex2, controls, x[2], x[1], output))
saveRDS(firsttry, "firsttry.RData")
output
IntroduceError_Random <- function(matrix, error){
matrix <- apply(matrix, c(1,2),
function(x) ifelse(x == 1, rbinom(1 ,1 , 1 - error), 0))
return(matrix)
}
ChangeCoding <- function(matrix1, matrix2){
changematrix <- matrix(NA, nrow(matrix1), nrow(matrix1))
for(i in 1:nrow(matrix1)){
for (j in 1:ncol(matrix1)){
if (matrix1[i,j] == 0){
if (matrix2[i,j] == 0){
changematrix[i,j] <- 0
} else {
changematrix[i,j] <- 1
}
} else {
if (matrix2[i,j] == 1){
changematrix[i,j] <- 2
} else {
changematrix[i,j] <- 3
}
}
}
}
return(changematrix)
}
SimulationRun <- function(IntroduceError_X, obs1, obs2, sex = sex2, controls, error, index, output){
netw_1 <- IntroduceError_X(obs1, error)
netw_2 <- IntroduceError_X(obs2, error)
actualchange <- ChangeCoding(obs1, obs2)
analyzedchange <- ChangeCoding(netw_1, netw_2)
error_in_change <- sum(actualchange != analyzedchange)/(nrow(actualchange)^2-length(diag(actualchange)))
friendship <- sienaDependent(array(c(netw_1, netw_2), dim = c(133,133,2)))
glasgowdata <- sienaDataCreate(friendship, sex2)
effects <- getEffects(glasgowdata)
effects <- includeEffects(effects, name = "friendship", density, recip, cycle3, gwespFF, transRecTrip, inPop, inAct)
effects <- includeEffects(effects, name = "friendship", sameX, interaction1 = "sex2")
results <- siena07(controls, data = glasgowdata, effects = effects)
output <- list()
output$analyzed_networks <- array(c(netw_1, netw_2), dim = c(133,133,2))
output$actualchange <- actualchange
output$analyzedchange <- analyzedchange
output$error <- error
output$error_in_change <- error_in_change
output$results <- results
output$theta <- results$theta
output$se <- results$se
return(output)
}
output <- apply(simulation_element, 1, function(x) SimulationRun(IntroduceError_Random, netwmatrices[[1]], secondobservations[[x[1]]], sex2, controls, x[2])
)
output
SimulationRun <- function(IntroduceError_X, obs1, obs2, sex = sex2, controls, error, index, output){
netw_1 <- IntroduceError_X(obs1, error)
netw_2 <- IntroduceError_X(obs2, error)
actualchange <- ChangeCoding(obs1, obs2)
analyzedchange <- ChangeCoding(netw_1, netw_2)
error_in_change <- sum(actualchange != analyzedchange)/(nrow(actualchange)^2-length(diag(actualchange)))
friendship <- sienaDependent(array(c(netw_1, netw_2), dim = c(133,133,2)))
glasgowdata <- sienaDataCreate(friendship, sex2)
effects <- getEffects(glasgowdata)
effects <- includeEffects(effects, name = "friendship", density, recip, cycle3, gwespFF, transRecTrip, inPop, inAct)
effects <- includeEffects(effects, name = "friendship", sameX, interaction1 = "sex2")
results <- siena07(controls, data = glasgowdata, effects = effects)
output <- list()
output$analyzed_networks <- array(c(netw_1, netw_2), dim = c(133,133,2))
output$actualchange <- actualchange
output$analyzedchange <- analyzedchange
output$error <- error
output$error_in_change <- error_in_change
output$results <- results
output$theta <- results$theta
output$se <- results$se
return(output)
}
output
output <- NULL
output
SimulationRun <- function(IntroduceError_X, obs1, obs2, sex = sex2, controls, error, index, output){
netw_1 <- IntroduceError_X(obs1, error)
netw_2 <- IntroduceError_X(obs2, error)
actualchange <- ChangeCoding(obs1, obs2)
analyzedchange <- ChangeCoding(netw_1, netw_2)
error_in_change <- sum(actualchange != analyzedchange)/(nrow(actualchange)^2-length(diag(actualchange)))
friendship <- sienaDependent(array(c(netw_1, netw_2), dim = c(133,133,2)))
glasgowdata <- sienaDataCreate(friendship, sex2)
effects <- getEffects(glasgowdata)
effects <- includeEffects(effects, name = "friendship", density, recip, cycle3, gwespFF, transRecTrip, inPop, inAct)
effects <- includeEffects(effects, name = "friendship", sameX, interaction1 = "sex2")
results <- siena07(controls, data = glasgowdata, effects = effects)
output <- list()
output$analyzed_networks <- array(c(netw_1, netw_2), dim = c(133,133,2))
output$actualchange <- actualchange
output$analyzedchange <- analyzedchange
output$error <- error
output$error_in_change <- error_in_change
output$results <- results
output$theta <- results$theta
output$se <- results$se
return(output)
}
secondobservations <- list()
graphs <- list()
for(i in 1:10){
observation <- thesims$sims[[i]]$Data1$friendship$`1`
graph <- graph_from_edgelist(as.matrix(observation[,-3]), directed = T)
adj_matrix <- as_adjacency_matrix(graph)
graphs[[i]] <- graph
secondobservations[[i]] <- adj_matrix
}
simulation_element <- expand.grid(1:2, 0.1)
output <- apply(simulation_element, 1, function(x) SimulationRun(IntroduceError_Random, netwmatrices[[1]], secondobservations[[x[1]]], sex2, controls, x[2]))
output
names(output)
length(output)
sapply(output, "[[", "error")
sapply(output, "[[", "error_in_change")
